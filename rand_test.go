package np

import (
	"fmt"
	"github.com/pa-m/randomkit"
)

func ExampleRandom() {
	rnd := randomkit.RKState{}
	rnd.Seed(42)
	for i := 1; i < 10; i++ {
		fmt.Println(rnd.Float64())
	}
	// Output:
	// 0.3745401188473625
	// 0.9507143064099162
	// 0.7319939418114051
	// 0.5986584841970366
	// 0.15601864044243652
	// 0.15599452033620265
	// 0.05808361216819946
	// 0.8661761457749352
	// 0.6011150117432088

}

func ExampleRandomNormal() {
	rnd := randomkit.RKState{}
	rnd.Seed(42)
	for i := 1; i < 10; i++ {
		fmt.Println(rnd.NormFloat64())
	}
	// Output:
	// 0.4967141530112327
	// -0.13826430117118466
	// 0.6476885381006925
	// 1.5230298564080254
	// -0.23415337472333597
	// -0.23413695694918055
	// 1.5792128155073915
	// 0.7674347291529088
	// -0.4694743859349521
}

func ExampleTestRandN() {
	rnd := randomkit.RKState{}
	rnd.Seed(42)
	fmt.Println(RandN(&rnd, 10))
	// Output:
	// [0.49671415 -0.13826430 0.64768854 1.52302986 -0.23415337 -0.23413696 1.57921282 0.76743473 -0.46947439 0.54256004 ]
}

func ExampleRandN() {
	rnd := randomkit.RKState{}
	rnd.Seed(42)
	res := RandN(&rnd, 40)
	expected := NpArray{
		0.4967141530112327, -0.13826430117118466, 0.6476885381006925, 1.5230298564080254, -0.23415337472333597,
		-0.23413695694918055, 1.5792128155073915, 0.7674347291529088, -0.4694743859349521, 0.5425600445480783,
		-0.4634176924152684, -0.465729750258121, 0.24196227156603412, -1.9132802443886548, -1.7249178325256874,
		-0.5622875327809211, -1.0128311203344238, 0.3142473325952734, -0.9080240755212108, -1.4123037013352915,
		1.465648768921554, -0.22577630310530303, 0.06752820468749734, -1.4247481905824634, -0.5443827247698924,
		0.11092259314570518, -1.1509935823085347, 0.3756980179353491, -0.600638689180186, -0.2916937517103762,
		-0.6017066126639317, 1.852278184508758, -0.013497220833454375, -1.057710928839773, 0.8225449197324413,
		-1.220843658710402, 0.2088636488630345, -1.959670120457828, -1.3281860515374616, 0.1968612420272514,
	}
	fmt.Println(res.AlmostEqual(expected, 1e-5))
	// Output:
	// true
}

func ExampleRandomChoice() {
	rnd := randomkit.RKState{}
	rnd.Seed(42)
	for i := 0; i < 10; i++ {
		fmt.Println(RandChoice(&rnd, 40))
	}

	// Output:
	// 38
	// 28
	// 14
	// 7
	// 20
	// 38
	// 18
	// 22
	// 10
	// 10
}
